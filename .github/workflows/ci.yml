name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    uses: ci_lint.yml

  type-check:
    uses: ci_type-check.yml

  security:
    uses: ci_security.yml

  test:
    uses: ci_test.yml

  docker-test:
    uses: ci_docker-test.yml
    secrets: inherit

  # Build and push Docker image (push event only)
  build-and-push:
    needs: [lint, type-check, security, test, docker-test]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/server.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Summary
        run: |
          echo "✅ Image built and pushed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.push.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** \`linux/amd64, linux/arm64\`" >> $GITHUB_STEP_SUMMARY

  # Branch Protection Rules 用
  # ci-success:
  #   runs-on: ubuntu-latest
  #   needs: [lint, type-check, security, test, docker-test]
  #   if: always()
  #   steps:
  #     - name: Check all jobs status
  #       run: |
  #         if [ "${{ needs.lint.result }}" != "success" ] || \
  #            [ "${{ needs.type-check.result }}" != "success" ] || \
  #            [ "${{ needs.security.result }}" != "success" ] || \
  #            [ "${{ needs.test.result }}" != "success" ] || \
  #            [ "${{ needs.docker-test.result }}" != "success" ]; then
  #           echo "❌ One or more CI jobs failed"
  #           echo "Lint: ${{ needs.lint.result }}"
  #           echo "Type Check: ${{ needs.type-check.result }}"
  #           echo "Security: ${{ needs.security.result }}"
  #           echo "Test: ${{ needs.test.result }}"
  #           echo "Docker Test: ${{ needs.docker-test.result }}"
  #           exit 1
  #         fi
  #         echo "✅ All CI checks passed successfully!"
