name: CI

on:
  pull_request_target:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event.pull_request.user.login == 'ukwhatn') ||
      (github.event.pull_request.user.login == 'dependabot[bot]')
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      # uv„Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆË®≠ÂÆö
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --group dev --group server --group db

      # Trivy„Éá„Éº„Çø„Éô„Éº„Çπ„Ç≠„É£„ÉÉ„Ç∑„É•
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ github.run_date }}
          restore-keys: |
            trivy-db-

      # Semgrep rules„Ç≠„É£„ÉÉ„Ç∑„É•
      - name: Cache Semgrep rules
        uses: actions/cache@v4
        with:
          path: ~/.semgrep
          key: semgrep-rules-${{ github.run_date }}
          restore-keys: |
            semgrep-rules-

      - name: Run Quality and Security Checks
        run: |
          echo "Running linting and security checks..."
          make lint &
          LINT_PID=$!
          
          echo "Installing Trivy Scanner..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.46.1 &
          TRIVY_INSTALL_PID=$!
          
          echo "Running critical Bandit scan..."
          uv run bandit -r app/ -x tests/,app/db/dump.py -ll &
          BANDIT_PID=$!
          
          echo "Running critical Semgrep scan..."
          uv run semgrep scan --config=p/python --config=p/security-audit --config=p/owasp-top-ten --severity ERROR --error &
          SEMGREP_PID=$!
          
          wait $TRIVY_INSTALL_PID
          echo "Scanning Dockerfiles..."
          trivy config --exit-code 1 --severity CRITICAL ./docker/server.Dockerfile &
          TRIVY_PID=$!
          
          wait $LINT_PID || { echo "Linting failed"; exit 1; }
          wait $BANDIT_PID || { echo "Bandit scan failed"; exit 1; }
          wait $SEMGREP_PID || { echo "Semgrep scan failed"; exit 1; }
          wait $TRIVY_PID || { echo "Trivy scan failed"; exit 1; }
          
          echo "All quality and security checks passed!"

  docker-tests:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event.pull_request.user.login == 'ukwhatn') ||
      (github.event.pull_request.user.login == 'dependabot[bot]')
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      # Docker BuildxË®≠ÂÆö
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker„É¨„Ç§„É§„Éº„Ç≠„É£„ÉÉ„Ç∑„É•
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-buildx-${{ github.sha }}
          restore-keys: |
            docker-buildx-

      - name: Setup environment
        run: |
          make envs:setup
          sed -i 's/S3_ACCESS_KEY=""/S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}"/' envs/aws-s3.env
          sed -i 's/S3_SECRET_KEY=""/S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY }}"/' envs/aws-s3.env

      - name: Start services
        run: make up ENV=test

      - name: Health check with timeout
        run: |
          timeout=30
          interval=5
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            if ! make ps ENV=test | grep -qiE "(starting|restarting|unhealthy)"; then
              echo "‚úÖ „Åô„Åπ„Å¶„ÅÆ„Çµ„Éº„Éì„Çπ„ÅåÊ≠£Â∏∏„Å´Ëµ∑Âãï„Åó„Åæ„Åó„ÅüÔºÅ"
              break
            fi
          
            echo "üïí „Çµ„Éº„Éì„ÇπËµ∑Âãï‰∏≠... ÁµåÈÅéÊôÇÈñì: ${elapsed}Áßí/${timeout}Áßí"
            make ps ENV=test
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå „Çø„Ç§„É†„Ç¢„Ç¶„Éà: „Çµ„Éº„Éì„Çπ„ÅåËµ∑Âãï„Åó„Åæ„Åõ„Çì„Åß„Åó„Åü"
            make ps ENV=test
            make logs:once ENV=test
            exit 1
          fi
          
          if make ps ENV=test | grep -q "unhealthy"; then
            echo "‚ùå ‰∏çÂÅ•ÂÖ®„Å™„Çµ„Éº„Éì„Çπ„Åå„ÅÇ„Çä„Åæ„Åô:"
            make ps ENV=test
            make logs:once ENV=test
            exit 1
          fi
          
          make ps ENV=test

      - name: Check Dumper service
        run: |
          make db:dump:test ENV=test

      - name: Clean up
        if: always()
        run: make down ENV=test