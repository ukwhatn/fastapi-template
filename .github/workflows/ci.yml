name: CI

on:
  pull_request_target:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      
      - name: Install dependencies
        id: install
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --with dev,server,db,dumper
      
      - name: Setup environment
        run: |
          make envs:setup
      
      - name: Build Docker images
        run: |
          make build ENV=test
    
  code-quality:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --with dev
      
      - name: Lint with ruff
        run: |
          make lint
  
  security-scan:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --with dev
      
      - name: Run comprehensive security scans
        run: |
          # 情報収集のためのスキャン (エラーがあってもビルド失敗しない)
          echo "Running Bandit code security scan..."
          poetry run bandit -r app/ -x tests/,app/db/dump.py -f txt || true
          
          echo "Running Semgrep SAST scan..."
          poetry run semgrep scan --config=p/python --config=p/security-audit --config=p/owasp-top-ten --error || true
      
      - name: Check for critical vulnerabilities
        run: |
          echo "Checking for critical code security issues..."
          poetry run bandit -r app/ -x tests/,app/db/dump.py -ll || exit 1
          
          echo "Checking for critical SAST findings..."
          poetry run semgrep scan --config=p/python --config=p/security-audit --config=p/owasp-top-ten --severity ERROR --error
  
  container-scan:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup environment
        run: |
          make envs:setup
      
      - name: Install Trivy Scanner
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.46.1
      
      - name: Scan Dockerfiles
        run: |
          # Dockerfileをスキャン (イメージビルド不要)
          echo "Scanning server Dockerfile..."
          trivy config --exit-code 0 --severity HIGH,CRITICAL ./docker/server.Dockerfile
          
          echo "Scanning db-tools Dockerfile..."
          trivy config --exit-code 0 --severity HIGH,CRITICAL ./docker/db-tools.Dockerfile
          
          echo "Checking for critical vulnerabilities in Dockerfiles..."
          trivy config --exit-code 1 --severity CRITICAL ./docker/server.Dockerfile
          trivy config --exit-code 1 --severity CRITICAL ./docker/db-tools.Dockerfile

  check_healthy:
    needs: setup
    runs-on: ubuntu-latest
    if: |
      (github.event.pull_request.user.login == 'ukwhatn') ||
      (github.event.pull_request.user.login == 'dependabot[bot]')

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup environment
        run: |
          make envs:setup
          sed -i 's/S3_ENDPOINT=http:\/\/your-storage-endpoint:port/S3_ENDPOINT="${{ secrets.S3_ENDPOINT || '' }}"/' envs/aws-s3.env
          sed -i 's/S3_ACCESS_KEY=your_access_key/S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY || '' }}"/' envs/aws-s3.env
          sed -i 's/S3_SECRET_KEY=your_secret_key/S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY || '' }}"/' envs/aws-s3.env

      - name: Build and start services
        run: make up ENV=test

      - name: Wait for services to be ready
        run: |
          max_retries=5
          retry_interval=5
          
          for i in $(seq 1 $max_retries)
          do
            if ! make ps ENV=test | grep -qiE "(starting|restarting|unhealthy)"; then
              echo "All services have finished starting!"
              break
            else
              echo "Waiting for services to finish starting... (Attempt $i/$max_retries)"
              sleep $retry_interval
            fi
          
            if [ $i -eq $max_retries ]; then
              echo "Services did not finish starting within the allocated time."
              make logs:once ENV=test
              exit 1
            fi
          done
          
          if make ps ENV=test | grep -q "unhealthy"; then
            echo "Some services are unhealthy:"
            make ps ENV=test
            make logs:once ENV=test
            exit 1
          else
            echo "All services are healthy!"
            make ps ENV=test
          fi

      - name: Check Dumper service
        run: make db:dump:test ENV=test

      - name: Clean up
        run: make down ENV=test