name: CI

on:
  pull_request_target:
    branches: [ main, develop ]

jobs:
  lint:
    # pull_requestイベントの場合のみ実行
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --with dev
      - name: Lint with ruff
        run: |
          ruff check .
      - name: Format check with ruff
        run: |
          ruff format --check .

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --with dev,server,db,dumper,test
      - name: Test with pytest
        run: |
          pytest tests/

  check_healthy:
    # pull_request_targetイベントの場合かつ特定のユーザーのPRの場合のみ実行
    if: |
      (github.event.pull_request.user.login == 'ukwhatn') || 
       (github.event.pull_request.user.login == 'dependabot[bot]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup environment
        run: |
          make envs:setup
          
          sed -i 's/S3_ENDPOINT=http:\/\/your-storage-endpoint:port/S3_ENDPOINT="${{ secrets.S3_ENDPOINT || '' }}"/' envs/aws-s3.env
          sed -i 's/S3_ACCESS_KEY=your_access_key/S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY || '' }}"/' envs/aws-s3.env
          sed -i 's/S3_SECRET_KEY=your_secret_key/S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY || '' }}"/' envs/aws-s3.env

      - name: Build and start services
        run: make up ENV=test

      - name: Wait for services to be ready
        run: |
          max_retries=5
          retry_interval=5
          
          for i in $(seq 1 $max_retries)
          do
            if ! make ps ENV=test | grep -qiE "(starting|restarting|unhealthy)"; then
              echo "All services have finished starting!"
              break
            else
              echo "Waiting for services to finish starting... (Attempt $i/$max_retries)"
              sleep $retry_interval
            fi
          
            if [ $i -eq $max_retries ]; then
              echo "Services did not finish starting within the allocated time."
              make logs:once ENV=test
              exit 1
            fi
          done
          
          if make ps ENV=test | grep -q "unhealthy"; then
            echo "Some services are unhealthy:"
            make ps ENV=test
            make logs:once ENV=test
            exit 1
          else
            echo "All services are healthy!"
            make ps ENV=test
          fi

      - name: Check Dumper service
        run: |
          # 元のcheck_healthyの動作を維持
          echo "Running DB backup test..."
          make db:dump:test ENV=test
          
          # 元のワークフローで存在していなかった新機能は条件付きで実行
          if [ "${{ github.event.pull_request.base.ref }}" == "develop" ]; then
            echo "Running additional DB dumper tests..."
            make db:dump:oneshot ENV=test
            make db:dump:list ENV=test
          fi

      - name: Clean up
        run: make down ENV=test