# ---------------------------------------------------------------------------

#
# This file configures the New Relic Python Agent.
#
# The path to the configuration file should be supplied to the function
# newrelic.agent.initialize() when the agent is being initialized.
#
# The configuration file follows a structure similar to what you would
# find for Microsoft Windows INI files. For further information on the
# configuration file format see the Python ConfigParser documentation at:
#
#    http://docs.python.org/library/configparser.html
#
# For further discussion on the behavior of the Python agent that can
# be configured via this configuration file see:
#
#    http://newrelic.com/docs/python/python-agent-configuration
#

# ---------------------------------------------------------------------------

# Here are the settings that are common to all environments.

[newrelic]

# You must specify the license key associated with your New
# Relic account. This key binds the Python Agent's data to your
# account in the New Relic service.
# Note: このパラメータはPythonコードから動的に設定されます
# license_key = ${NEW_RELIC_LICENSE_KEY}

# The application name. Set this to be the name of your
# application as you would like it to show up in New Relic UI.
# The UI will then auto-map instances of your application into a
# entry on your home dashboard page.
# Note: このパラメータはPythonコードから動的に設定されます
# app_name = ${NEW_RELIC_APP_NAME}

# When "true", the agent collects performance data about your
# application and reports this data to the New Relic UI at
# newrelic.com. This global switch is normally overridden for
# each environment below.
monitor_mode = true

# Sets the name of a file to log agent messages to. Useful for
# debugging any issues with the agent. This is not set by
# default as it is not known in advance what user your web
# application processes will run as and where they have
# permission to write to. Whatever you set this to you must
# ensure that the permissions for the containing directory and
# the file itself are correct, and that the user that your web
# application runs as can write to the file. If not able to
# write out a log file, it is also possible to say "stderr" and
# output to standard error output. This would normally result in
# output appearing in your web server log.
log_file = stdout

# Sets the level of detail of messages sent to the log file, if
# a log file location has been provided. Possible values, in
# increasing order of detail, are: "critical", "error", "warning",
# "info" and "debug". When reporting any agent issues to New
# Relic technical support, the most useful setting for the
# support engineers is "debug". However, this can generate a lot
# of information very quickly, so it is best not to keep the
# agent at this level for longer than it takes to reproduce the
# problem you are experiencing.
log_level = info

# The Python Agent communicates with the New Relic service using
# SSL by default. Note that this does not affect calls to the New
# Relic REST API.
#ssl = true

# High Security Mode enforces certain security settings and
# prevents them from being overridden.
# See https://docs.newrelic.com/docs/subscriptions/high-security.
# Only in high security mode (enabled), SSL is enabled for all
# communication with the New Relic Servers, and all data sent 
# to New Relic is encrypted.  If Data Privacy mode(disabled)
# and SSL is disabled you will not be able to send Health data.
# Note: このパラメータはPythonコードから動的に設定されます
# high_security = false

# The Python Agent will attempt to connect directly to the New
# Relic service. If there is an intermediate firewall between
# your host and the New Relic service that requires you to use a
# HTTP proxy, then you should set both the "proxy_host" and
# "proxy_port" settings to the required values for the HTTP
# proxy. The "proxy_user" and "proxy_pass" settings should
# additionally be set if proxy authentication is implemented by
# the HTTP proxy.
# proxy_scheme = http
# proxy_host = 
# proxy_port = 8080
# proxy_user =
# proxy_pass =

# Capturing request parameters is off by default. To enable the
# capture of request parameters, set this to true. When enabled,
# request parameters are captured for all traced transactions and
# sent to the service, allowing them to be displayed in transaction
# traces and Insights. (Default: false)
capture_params = false

# Space separated list of variables that should be removed from
# the captured request parameters. Names must be surrounded by
# double quotes. Example:
# ignored_params = "CREDIT_CARD_NUMBER SECRET_THINGS"
ignored_params =

# The obfuscation settings control how captured request parameters
# are obfuscated when sent to the New Relic service.
# obfuscated_request_parameters = creditcard, ssn, password

# This field controls how the agent handles processing of request
# header data. If capture_header_data is true, the agent will
# collect application headers on incoming requests, and extract
# values from response headers when sending the response. This
# may be useful to examine user and session ids in requests.
# By default this is false. If you enable it, you will have
# transaction traces and errors on requests with X-Request-Id header.
capture_header_data = true

# header_keys is a list of patterns for matching header keys. If
# header_keys is empty, all headers will be collected. Patterns
# use standard Python fnmatch() syntax, with implicit 'contains'
# mode.  For example, ['Acc*'] would collect 'Accept' and
# 'AcceptEncoding' headers.
# By default this list is populated with common headers that can
# be useful in diagnosing requests.
header_keys = X-Request-Id

# Transaction Events settings
# Transaction Events is available in the following policies:
# Enterprise, Flex, Essentials, Basic and Lite.
transaction_events.enabled = true

# The agent will collect all transaction events up to the
# configured maximum sampling rate.
transaction_events.max_samples_stored = 2000

# Insights settings
# Application Insights is available in the following policies:
# Enterprise, Flex, Essentials, Basic and Lite
# attributes.enabled controls APM attributes and custom attributes
# Set enabled to false to disable attribute collection. #attributes.enabled = true
# This is now a deprecated alias with warning.
# It remains here for backwards compatibility but will be
# removed in a future release.
# To disable all attributes, use:
#     transaction_tracer.attributes.enabled = false
#     span_events.attributes.enabled = false
#     transaction_events.attributes.enabled = false
#     error_collector.attributes.enabled = false
#     browser_monitoring.attributes.enabled = false

# The agent will collect all events up to
# max_samples_stored per harvest cycle.
# This setting applies to Insights events
#transaction_events.max_samples_stored = 2000

# Default size threshold for Insights events in bytes
max_event_size_in_bytes = 65536

# This setting controls the maximum number of events that 
# will be buffered when metrics, events and traces are sent
# at a later time due to a temporary network issue.
event_buffer_size = 100000

# Transaction Tracer settings
# Transaction Tracer is available in the following policies:
# Enterprise, Flex, Essentials, Basic and Lite.

# Transaction tracer captures deep information about slow
# transactions and sends this to the UI on a periodic basis. The
# transaction tracer is enabled by default. Set this to "false"
# to turn it off.
transaction_tracer.enabled = true

# Threshold in seconds for when to collect a transaction
# trace. When the response time of a controller action exceeds
# this threshold, a transaction trace will be recorded and sent to
# the UI. Valid values are any positive float value, or (default)
# "apdex_f", which will use the threshold for a dissatisfying
# Apdex controller action - four times the Apdex T value.
transaction_tracer.transaction_threshold = apdex_f

# When the transaction tracer is on, SQL statements can
# optionally be recorded. The recorder has three modes, "off"
# which sends no SQL, "raw" which sends the SQL statement in its
# original form, and "obfuscated", which strips out numeric and
# string literals.
transaction_tracer.record_sql = raw

# Threshold in seconds for when to collect stack trace for a SQL
# call. In other words, when SQL statements exceed this threshold,
# then capture and send to the UI the current stack trace. This is
# helpful for pinpointing where long SQL calls originate from in an
# application.
transaction_tracer.stack_trace_threshold = 0.5

# Determines whether the agent will capture query plans for slow
# SQL queries. Only supported in MySQL and PostgreSQL. Set this
# to "false" to turn it off.
transaction_tracer.explain_enabled = true

# Threshold for query execution time below which query plans will
# not not be captured.  Relevant only when "explain_enabled" is
# true.
transaction_tracer.explain_threshold = 0.5

# Space separated list of function or method names in form
# 'module:function' or 'module:class.function' for which
# additional function timing instrumentation will be added.
transaction_tracer.function_trace =

# Error Collector settings
# Error Collector is available in all policy types.

# Sets whether or not the agent captures errors. If "true", the
# agent captures errors from functions that would otherwise report
# no errors, such as flask or tornado. If "false", the agent only
# captures errors from functions the agent has instrumented.
error_collector.capture_source = true

# Error Collector is enabled by default. Set this to "false" to
# turn it off. This feature is only available in the following
# policies: Enterprise, Flex and Essentials. Error and error_events
# are both ways of understanding errors in your application. We
# recommend using both for comprehensive coverage.
error_collector.enabled = true

# To stop specific errors from reporting to the UI, set this to
# a space separated list of the Python exception type names to
# ignore. The exception name should be of the form 'module:class'.
error_collector.ignore_errors =

# Browser monitoring settings
# Browser monitoring is available in the following policies:
# Enterprise, Flex, and Essentials.

# Browser monitoring is always enabled by default. Set this to
# false to turn it off.
# This requires that auto-rum is enabled in your integration.
# If the script is not injected into the page then no browser
# data will be available regardless of this setting.
browser_monitoring.enabled = true

# Cross application tracer settings
# Cross Application Tracer is enabled by default.

# This inhibits the transmission of more than one CAT header
# because there are some APIs where multiple CAT headers do not
# make sense. This prevents opening of other CAT links.
distribute_trace.exclude_newrelic_header = false

# Thread profiler settings
# Thread profiler is available in the following policies:
# Enterprise, Flex, Essentials and Basic.

# Thread profiler is enabled by default. Set this to "false" to turn
# it off.
thread_profiler.enabled = true

# ---------------------------------------------------------------------------

# The application environments. These are specific settings which
# override the common environment settings. The settings related to a
# specific environment will be used when the environment argument to the
# newrelic.agent.initialize() function has been defined to be either
# "development", "test", "staging" or "production".

[newrelic:development]
monitor_mode = true

[newrelic:test]
monitor_mode = true

[newrelic:staging]
monitor_mode = true

[newrelic:production]
monitor_mode = true