services:
  server:
    container_name: fastapi-template-server
    build:
      context: .
      dockerfile: docker/server.Dockerfile
    command:
      - /bin/sh
      - -c
      - |
        if [ "$ENV_MODE" = "development" ]; then
          fastapi dev app/main.py --host 0.0.0.0 --port 80 --proxy-headers
        else
          fastapi run app/main.py --host 0.0.0.0 --port 80 --proxy-headers
        fi
    ports:
      - "${SERVER_PORT:-127.0.0.1:8000}:80"
    volumes:
      - ./app:/usr/src/app
      - ./newrelic.ini:/etc/newrelic.ini:ro
    env_file:
      - .env
    environment:
      - ENV_MODE=${ENV_MODE:-development}
      - WATCHFILES_FORCE_POLLING=true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/system/healthcheck/"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    depends_on:
      db:
        condition: service_healthy
        required: false
      db-migrator:
        condition: service_completed_successfully
        required: false
    networks:
      - db
    profiles:
      - dev
      - stg
      - test
      - prod
    develop:
      # Docker Compose Watchを使用した開発モードの設定
      # Docker Compose 2.22.0以降が必要
      watch:
        # 作業ディレクトリとコンテナ内の/appを同期
        - action: sync
          path: .
          target: /app
          # 仮想環境ディレクトリは除外
          ignore:
            - .venv/
            - __pycache__/
            - "*.pyc"
        # pyproject.tomlが変更された場合はイメージを再ビルド
        - action: rebuild
          path: ./pyproject.toml
        # uv.lockが変更された場合はイメージを再ビルド
        - action: rebuild
          path: ./uv.lock

  db:
    container_name: fastapi-template-db
    image: postgres:17
    env_file:
      - .env
    environment:
      POSTGRES_DB: main
      TZ: Asia/Tokyo
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U user -d main
      interval: 2s
      timeout: 5s
      retries: 30
    networks:
      - db
    profiles:
      - db

  db-migrator:
    container_name: fastapi-template-db-migrator
    image: ghcr.io/ukwhatn/psql-migrator:latest
    volumes:
      - ./versions:/app/versions
      - ./app/db/models:/app/migrations/models
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
    restart: no
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db
    profiles:
      - db

  adminer:
    container_name: fastapi-template-adminer
    image: adminer:latest
    environment:
      ADMINER_DEFAULT_SERVER: db
      ADMINER_DESIGN: pepa-linha
    ports:
      - "127.0.0.1:8001:8080"
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      db-migrator:
        condition: service_completed_successfully
    networks:
      - db
    profiles:
      - db-dev

  db-dumper:
    container_name: fastapi-template-db-dumper
    image: ghcr.io/ukwhatn/psql-dumper:latest
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db
    profiles:
      - db-prod
      - db-stg
      - db-test

volumes:
  pg_data:

networks:
  db:
    driver: bridge 