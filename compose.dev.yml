services:
  server:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    command: [ "/bin/sh", "-c", "NEW_RELIC_CONFIG_FILE=newrelic.ini NEW_RELIC_ENVIRONMENT=development newrelic-admin run-program uvicorn app.main:app --reload --host 0.0.0.0 --port 80 --proxy-headers" ]
    ports:
      - "127.0.0.1:8000:80"
    volumes:
      - .:/app
    env_file:
      - ./envs/db.env
      - ./envs/server.env
      - ./envs/sentry.env
    environment:
      - ENV_MODE=development
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/system/healthcheck/" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrator:
        condition: service_completed_successfully
    networks:
      - db
      - redis

  db:
    image: postgres:17
    env_file:
      - ./envs/db.env
    environment:
      POSTGRES_DB: main
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U user -d main
      interval: 2s
      timeout: 5s
      retries: 30
    networks:
      - db

  pgadmin:
    image: dpage/pgadmin4:latest
    volumes:
      - ./pgadmin/config/servers.json:/pgadmin4/servers.json
    environment:
      PGADMIN_DEFAULT_EMAIL: user@example.com
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    ports:
      - "127.0.0.1:8001:80"
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      db-migrator:
        condition: service_completed_successfully
    networks:
      - db

  redis:
    image: redis:7.4.1
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: redis-cli ping
      interval: 2s
      timeout: 5s
      retries: 30
    networks:
      - redis

  db-migrator:
    build:
      context: .
      dockerfile: ./docker/db-tools.Dockerfile
      args:
        MODE: migrator
    env_file:
      - ./envs/db.env
    environment:
      - DB_TOOL_MODE=migrator
    restart: no
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db
      
  # 開発環境では必要に応じてコメントを外して使用
  # db-dumper:
  #   build:
  #     context: .
  #     dockerfile: ./docker/db-tools.Dockerfile
  #     args:
  #       MODE: dumper
  #   env_file:
  #     - ./envs/db.env
  #     - ./envs/sentry.env
  #   environment:
  #     - DB_TOOL_MODE=dumper
  #     - DUMPER_MODE=interactive
  #     - POSTGRES_HOST=db
  #     - POSTGRES_DB=main
  #   restart: "no"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   networks:
  #     - db

volumes:
  pg_data:
  redis_data:

networks:
  db:
    driver: bridge
  redis:
    driver: bridge